syntax = "proto3";

package privacy.ppn;

import "privacy/net/attestation/proto/attestation.proto";

option java_outer_classname = "ZincProto";
option java_package = "com.google.android.libraries.privacy.ppn.proto";
option java_api_version = 2;
option java_multiple_files = true;

message PublicKeyRequest {}

message PublicKeyResponse {
  // The rsa public key PEM.
  string pem = 1;
}

// Client is requesting to auth using the provided auth token.
message AuthAndSignRequest {
  reserved 3, 6, 7;

  // A 'bearer' oauth token to be validated.
  // https://datatracker.ietf.org/doc/html/rfc6750#section-6.1.1
  string oauth_token = 1;

  // A string uniquely identifying the strategy this client should be
  // authenticated with.
  string service_type = 2;

  // A set of blinded tokens to be signed by zinc. b64 encoded.
  repeated string blinded_token = 4;

  // A sha256 of the public key PEM used in generated `blinded_token`. This
  // Ensures the signer signs with the matching key.
  string public_key_hash = 5;

  privacy.ppn.AttestationData attestation = 8;
}

message AuthAndSignResponse {
  reserved 1, 2, 3;

  // A set of signatures corresponding by index to `blinded_token` in the
  // request. b64 encoded.
  repeated string blinded_token_signature = 4;

  // The marconi server hostname bridge-proxy used to set up tunnel.
  string copper_controller_hostname = 5;

  // The base64 encoding of override_region token and signature for white listed
  // users in the format of "${Region}.${timestamp}.${signature}".
  string region_token_and_signature = 6;

  // The APN type bridge-proxy use to deside which APN to use for connecting.
  string apn_type = 7;
}

service ZincService {
  // See request/response comments.
  rpc PublicKey(PublicKeyRequest) returns (PublicKeyResponse) {
  }
  // See request/response comments.
  rpc AuthAndSign(AuthAndSignRequest) returns (AuthAndSignResponse) {
  }
}
